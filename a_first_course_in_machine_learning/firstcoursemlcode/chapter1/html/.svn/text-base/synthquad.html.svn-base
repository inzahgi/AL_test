
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <!--
This HTML was auto-generated from MATLAB code.
To make changes, update the MATLAB code and republish this document.
      --><title>synthquad</title><meta name="generator" content="MATLAB 7.12"><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/"><meta name="DC.date" content="2011-10-31"><meta name="DC.source" content="synthquad.m"><style type="text/css">

body {
  background-color: white;
  margin:10px;
}

h1 {
  color: #990000; 
  font-size: x-large;
}

h2 {
  color: #990000;
  font-size: medium;
}

/* Make the text shrink to fit narrow windows, but not stretch too far in 
wide windows. */ 
p,h1,h2,div.content div {
  max-width: 600px;
  /* Hack for IE6 */
  width: auto !important; width: 600px;
}

pre.codeinput {
  background: #EEEEEE;
  padding: 10px;
}
@media print {
  pre.codeinput {word-wrap:break-word; width:100%;}
} 

span.keyword {color: #0000FF}
span.comment {color: #228B22}
span.string {color: #A020F0}
span.untermstring {color: #B20000}
span.syscmd {color: #B28C00}

pre.codeoutput {
  color: #666666;
  padding: 10px;
}

pre.error {
  color: red;
}

p.footer {
  text-align: right;
  font-size: xx-small;
  font-weight: lighter;
  font-style: italic;
  color: gray;
}

  </style></head><body><div class="content"><h2>Contents</h2><div><ul><li><a href="#1">synthquad.m</a></li><li><a href="#2">Generate a synthetic dataset from a quadratic function</a></li><li><a href="#3">Define the function and the true parameters</a></li><li><a href="#4">Define t</a></li><li><a href="#5">Add some noise</a></li><li><a href="#6">Plot the data</a></li><li><a href="#7">Fit the quadratic model and a linear model for comparison</a></li><li><a href="#8">Plot the functions</a></li></ul></div><h2>synthquad.m<a name="1"></a></h2><p>From A First Course in Machine Learning, Chapter 1. Simon Rogers, 31/10/11 [simon.rogers@glasgow.ac.uk]</p><pre class="codeinput">clear <span class="string">all</span>;close <span class="string">all</span>;
</pre><h2>Generate a synthetic dataset from a quadratic function<a name="2"></a></h2><pre class="codeinput">N = 200; <span class="comment">%Number of data points</span>
<span class="comment">% Generate random x values between -5 and 5</span>
x = 10*(sort(rand(N,1))-0.5);
</pre><h2>Define the function and the true parameters<a name="3"></a></h2><p><img src="synthquad_eq76262.png" alt="$t = w_0 + w_1x + w_2x^2$"></p><pre class="codeinput">w_0 = 1;
w_1 = -2;
w_2 = 0.5;
</pre><h2>Define t<a name="4"></a></h2><pre class="codeinput">t = w_0 + w_1*x + w_2*(x.^2);
</pre><h2>Add some noise<a name="5"></a></h2><pre class="codeinput">t = t + 0.5*randn(N,1);
</pre><h2>Plot the data<a name="6"></a></h2><pre class="codeinput">figure(1);
hold <span class="string">off</span>
plot(x,t,<span class="string">'k.'</span>,<span class="string">'markersize'</span>,10);
xlabel(<span class="string">'x'</span>);
ylabel(<span class="string">'t'</span>);
</pre><img vspace="5" hspace="5" src="synthquad_01.png" alt=""> <h2>Fit the quadratic model and a linear model for comparison<a name="7"></a></h2><p>Using vector matrix notation</p><pre class="codeinput">X = [];
<span class="keyword">for</span> k = 0:2
    X = [X x.^k];
    <span class="keyword">if</span> k == 1
        linear_w = inv(X'*X)*X'*t;
    <span class="keyword">end</span>
    <span class="keyword">if</span> k == 2
        quad_w = inv(X'*X)*X'*t;
    <span class="keyword">end</span>
<span class="keyword">end</span>

fprintf(<span class="string">'\n Linear function: t = %g + %g x'</span>,linear_w(1),linear_w(2));
fprintf(<span class="string">'\n Quadratic function: t = %g + %g x + %g x^2'</span>,<span class="keyword">...</span>
    quad_w(1),quad_w(2),quad_w(3));
</pre><pre class="codeoutput">
 Linear function: t = 5.20924 + -2.08484 x
 Quadratic function: t = 0.989651 + -1.98841 x + 0.501596 x^2</pre><h2>Plot the functions<a name="8"></a></h2><pre class="codeinput">plotx = [-5:0.01:5]';
plotX = [];
<span class="keyword">for</span> k = 0:2
    plotX = [plotX plotx.^k];
<span class="keyword">end</span>

figure(1);hold <span class="string">off</span>;
<span class="comment">% Add the data again</span>
plot(x,t,<span class="string">'k.'</span>,<span class="string">'markersize'</span>,10);
xlabel(<span class="string">'x'</span>);
ylabel(<span class="string">'t'</span>);
hold <span class="string">on</span>
plot(plotx,plotX*quad_w,<span class="string">'r'</span>,<span class="string">'linewidth'</span>,2);
plot(plotx,plotX(:,1:2)*linear_w,<span class="string">'g'</span>,<span class="string">'linewidth'</span>,2);

legend(<span class="string">'Data'</span>,<span class="string">'Quadratic'</span>,<span class="string">'Linear'</span>)
</pre><img vspace="5" hspace="5" src="synthquad_02.png" alt=""> <p class="footer"><br>
      Published with MATLAB&reg; 7.12<br></p></div><!--
##### SOURCE BEGIN #####
%% synthquad.m
% From A First Course in Machine Learning, Chapter 1.
% Simon Rogers, 31/10/11 [simon.rogers@glasgow.ac.uk]
clear all;close all;

%% Generate a synthetic dataset from a quadratic function
N = 200; %Number of data points
% Generate random x values between -5 and 5
x = 10*(sort(rand(N,1))-0.5);
%% Define the function and the true parameters
% $t = w_0 + w_1x + w_2x^2$
w_0 = 1;
w_1 = -2;
w_2 = 0.5;

%% Define t
t = w_0 + w_1*x + w_2*(x.^2);

%% Add some noise
t = t + 0.5*randn(N,1);

%% Plot the data
figure(1);
hold off
plot(x,t,'k.','markersize',10);
xlabel('x');
ylabel('t');

%% Fit the quadratic model and a linear model for comparison
% Using vector matrix notation
X = [];
for k = 0:2
    X = [X x.^k];
    if k == 1
        linear_w = inv(X'*X)*X'*t;
    end
    if k == 2
        quad_w = inv(X'*X)*X'*t;
    end
end

fprintf('\n Linear function: t = %g + %g x',linear_w(1),linear_w(2));
fprintf('\n Quadratic function: t = %g + %g x + %g x^2',...
    quad_w(1),quad_w(2),quad_w(3));

%% Plot the functions

plotx = [-5:0.01:5]';
plotX = [];
for k = 0:2
    plotX = [plotX plotx.^k];
end

figure(1);hold off;
% Add the data again
plot(x,t,'k.','markersize',10);
xlabel('x');
ylabel('t');
hold on
plot(plotx,plotX*quad_w,'r','linewidth',2);
plot(plotx,plotX(:,1:2)*linear_w,'g','linewidth',2);

legend('Data','Quadratic','Linear')
##### SOURCE END #####
--></body></html>